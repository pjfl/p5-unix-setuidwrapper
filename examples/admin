#!/usr/bin/env perl

# Run once as root with
#   perl examples/admin -c init-suid-wrapper
# Thereafter run as a normal user
#   perl examples/admin -c test-cmd
#   perl examples/admin -c not-allowed

use lib;
use strict;
use warnings;

use FindBin qw( $Bin );
use File::Spec::Functions qw( catdir updir );

lib->import( catdir( $Bin, updir, 'lib' ) ); # So that Perl can find U::SW

# This is to avoid packaging a root owned directory and files
my $cmd = 'cp -r examples/secure t && '
        . 'chmod g-rx t/secure && chmod g-r t/secure/*';

not -d 't/secure' and qx( $cmd );

package YourApp::Admin; # This would be in it's own lib file

use namespace::autoclean;

our $VERSION = '0.1';

use English qw( -no_match_vars );
use Moo;

extends q(Class::Usul::Programs); # Framework for command line programs
with    q(Unix::SetuidWrapper);

# Add your own methods here. Your can call them from the command line
sub not_allowed : method { # Calling this will result in acceess denied
   my $self = shift; $self->info( "User id $EFFECTIVE_USER_ID" ); return 0;
}

sub remove_secure_dir : method { # Cleanup the root owned secure dir
   my $self = shift; $self->secure_dir->rmtree; return 0;
}

sub test_cmd : method { # Prints the effective user id
   my $self = shift; $self->info( "User id $EFFECTIVE_USER_ID" ); return 0;
}

$INC{ 'YourApp::Admin' } = __FILE__;

package main; # This script would be in the bin directory

use YourApp::Admin;

# This is only needed for interactive sessions
#$ENV{ENV} = '${START[(_$- = 1)+(_ = 0)-(_$- != _${-%%*i*})]}';

# Create the application instance
my $app = YourApp::Admin->new_with_options
   (  config => { tempdir => 't', vardir => 't' }, noask  => 1, );

# If we are not running setuid root execute the wrapper
$app->is_euid_zero or exec $app->wrapped_cmdline or exit 1;

# We are running with euid zero so call the wanted method
exit $app->run;
